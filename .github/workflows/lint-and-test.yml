name: Linting & tests

on: [push, pull_request]

jobs:
  mypy:
    runs-on: ubuntu-latest
    name: Lint - Type consistency (mypy)
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          cache: 'pip'
          cache-dependency-path: 'setup.py'
      - name: Install with type-checking tools
        run: pip install .[typing]
      - name: Run mypy
        run: ./tools/run-mypy

  flake8:
    runs-on: ubuntu-latest
    name: Lint - PEP8 & more (flake8)
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          cache: 'pip'
          cache-dependency-path: 'setup.py'
      - name: Install with linting tools
        run: pip install .[linting]
      - name: Run flake8
        run: flake8 zulipterminal/ tests/ setup.py `tools/python_tools.py`

  isort:
    runs-on: ubuntu-latest
    name: Lint - Import order (isort)
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: 3.6
          cache: 'pip'
          cache-dependency-path: 'setup.py'
      - name: Install with linting tools
        # NOTE: Install pytest so that isort recognizes it as a known library
        run: pip install .[linting] && pip install pytest
      - name: Run isort
        run: ./tools/run-isort-check

  black:
    runs-on: ubuntu-latest
    name: Lint - Code formatting (black)
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: 3.6
          cache: 'pip'
          cache-dependency-path: 'setup.py'
      - name: Install with linting tools
        run: pip install .[linting]
      - name: Check code & tests meet black standards
        run: black --check zulipterminal/ tests/ setup.py `tools/python_tools.py`

  pytest:
    strategy:
      # Not failing fast allows all matrix jobs to try & finish even if one fails early
      fail-fast: false
      matrix:
        env:
          - {PYTHON: 3.6, OS: ubuntu-latest, NAME: "CPython 3.6 (ubuntu)"}
          - {PYTHON: 3.7, OS: ubuntu-latest, NAME: "CPython 3.7 (ubuntu)"}
          - {PYTHON: 3.8, OS: ubuntu-latest, NAME: "CPython 3.8 (ubuntu)"}
          - {PYTHON: 3.9, OS: ubuntu-latest, NAME: "CPython 3.9 (ubuntu)", CODECOV: true}
          - {PYTHON: "3.10", OS: ubuntu-latest, NAME: "CPython 3.10 (ubuntu)"}
          - {PYTHON: 'pypy-3.6', OS: ubuntu-latest, NAME: "PyPy 3.6 (ubuntu)"}
          - {PYTHON: 'pypy-3.7', OS: ubuntu-latest, NAME: "PyPy 3.7 (ubuntu)"}
          - {PYTHON: 'pypy-3.8', OS: ubuntu-latest, NAME: "PyPy 3.8 (ubuntu)"}
          - {PYTHON: 'pypy-3.9', OS: ubuntu-latest, NAME: "PyPy 3.9 (ubuntu)"}
          - {PYTHON: 3.9, OS: macos-latest, NAME: "CPython 3.9 (macos)"}
    runs-on: ${{ matrix.env.OS }}
    name: Install & test - ${{ matrix.env.NAME}}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Python version ${{ matrix.env.PYTHON }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.env.PYTHON }}
          cache: 'pip'
          cache-dependency-path: 'setup.py'
      - name: Output Python version
        run: python --version
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Ensure libxml-related libraries are installed (some pypy versions don't have wheels)
        if: startsWith(matrix.env.PYTHON, 'pypy-')
        run: sudo apt install libxml2-dev libxslt1-dev
      - name: Ensure regular package installs from checkout
        run: pip install .
      - name: Install test dependencies
        run: pip install .[testing]
      - name: Run tests with pytest
        run: pytest --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        # We avoid extra work by just running codecov on one python version
        if: matrix.env.CODECOV
